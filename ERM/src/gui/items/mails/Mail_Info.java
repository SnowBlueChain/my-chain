package gui.items.mails;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

import javax.swing.JOptionPane;

import org.apache.log4j.Logger;
import org.bouncycastle.crypto.InvalidCipherTextException;

import controller.Controller;
import core.account.Account;
import core.account.PrivateKeyAccount;
import core.crypto.AEScrypto;
import core.transaction.R_Send;
import database.DBSet;
import gui.PasswordPane;
import gui.transaction.Send_RecordDetailsFrame;
import lang.Lang;
import utils.Converter;
import utils.DateTimeFormat;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Саша
 */
public class Mail_Info extends javax.swing.JPanel {

	R_Send trans;
	private static final Logger LOGGER = Logger.getLogger(Send_RecordDetailsFrame.class);
	boolean encrypted;
    /**
     * Creates new form Mail_Info
     */
    public Mail_Info(R_Send trans) {
		
	this.trans = trans;	
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel_Block = new javax.swing.JLabel();
        jTextField_Block = new javax.swing.JTextField();
        jLabel_Data = new javax.swing.JLabel();
        jTextField_Data = new javax.swing.JTextField();
        jLabel_Sender = new javax.swing.JLabel();
        jTextField_Sender = new javax.swing.JTextField();
        jLabel_Message = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_Messge = new javax.swing.JTextArea();
        jLabel_Reciever = new javax.swing.JLabel();
        jTextField_Reciever = new javax.swing.JTextField();
        jLabel_Title = new javax.swing.JLabel();
        jTextField_Title = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel_Block.setText(Lang.getInstance().translate("Block")+":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 4);
        add(jLabel_Block, gridBagConstraints);
        
       
        jTextField_Block.setText(trans.viewHeightSeq(DBSet.getInstance()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        add(jTextField_Block, gridBagConstraints);

        jLabel_Data.setText(Lang.getInstance().translate("Date")+":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 0, 4);
        add(jLabel_Data, gridBagConstraints);

        jTextField_Data.setText(DateTimeFormat.timestamptoString(trans.getTimestamp(), "dd-mm-yyyy", "0"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 9);
        add(jTextField_Data, gridBagConstraints);

        jLabel_Sender.setText(Lang.getInstance().translate("Sender")+":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
        add(jLabel_Sender, gridBagConstraints);

        jTextField_Sender.setText(trans.getCreator().getPersonAsString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 9);
        add(jTextField_Sender, gridBagConstraints);
        
        jLabel_Reciever.setText(Lang.getInstance().translate("Recipient")+":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
        add(jLabel_Reciever, gridBagConstraints);


        jTextField_Reciever.setText(trans.getRecipient().getPersonAsString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 9);
        add(jTextField_Reciever, gridBagConstraints);

        jLabel_Title.setText(Lang.getInstance().translate("Title")+":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
        add(jLabel_Title, gridBagConstraints);

        jTextField_Title.setText(trans.getHead());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 9);
        add(jTextField_Title, gridBagConstraints);

        
        
        
        
        jLabel_Message.setText(Lang.getInstance().translate("Message")+":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
        add(jLabel_Message, gridBagConstraints);

        jTextArea_Messge.setColumns(20);
        jTextArea_Messge.setRows(5);
        jTextArea_Messge.setLineWrap(true);
        jTextArea_Messge.setText(( trans.isText() ) ? new String(trans.getData(), Charset.forName("UTF-8")) : Converter.toHex(trans.getData()));
        jScrollPane1.setViewportView(jTextArea_Messge);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 9);
        add(jScrollPane1, gridBagConstraints);

        
        
       
        jButton1.setText(Lang.getInstance().translate("Decrypt"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 7, 9);
        if (trans.isEncrypted()) add(jButton1, gridBagConstraints);
        
        
        jButton1.addActionListener(new ActionListener()
        
        {
        	public void actionPerformed(ActionEvent e)
        	{
        		
        		
        		if(!encrypted)
        		{
	        		
        			
        			if(!Controller.getInstance().isWalletUnlocked())
	        		{
	        			//ASK FOR PASSWORD
	        			String password = PasswordPane.showUnlockWalletDialog(); 
	        			if(!Controller.getInstance().unlockWallet(password))
	        			{
	        				//WRONG PASSWORD
	        				JOptionPane.showMessageDialog(null, Lang.getInstance().translate("Invalid password"), Lang.getInstance().translate("Unlock Wallet"), JOptionPane.ERROR_MESSAGE);
	        				
	        				encrypted =!encrypted;
	        				
	        				return;
	        			}
	        		}
	
	        		Account account = Controller.getInstance().getAccountByAddress(trans.getCreator().getAddress());	
	        		
	        		byte[] privateKey = null; 
	        		byte[] publicKey = null;
	        		//IF SENDER ANOTHER
	        		if(account == null)
	        		{
	            		PrivateKeyAccount accountRecipient = Controller.getInstance().getPrivateKeyAccountByAddress(trans.getRecipient().getAddress());
	    				privateKey = accountRecipient.getPrivateKey();		
	    				
	    				publicKey = trans.getCreator().getPublicKey();    				
	        		}
	        		//IF SENDER ME
	        		else
	        		{
	            		PrivateKeyAccount accountRecipient = Controller.getInstance().getPrivateKeyAccountByAddress(account.getAddress());
	    				privateKey = accountRecipient.getPrivateKey();		
	    				
	    				publicKey = Controller.getInstance().getPublicKeyByAddress(trans.getRecipient().getAddress());    				
	        		}
	        		
	        		try {
	        			jTextArea_Messge.setText(new String(AEScrypto.dataDecrypt(trans.getData(), privateKey, publicKey), "UTF-8"));
	        			jButton1.setText(Lang.getInstance().translate("Encrypt Message"));
	        			encrypted =!encrypted;
	        		
	        		
	        		} catch (UnsupportedEncodingException | InvalidCipherTextException e1) {
						LOGGER.error(e1.getMessage(),e1);
					}
        		}
        		else
        		{
        			try {
        				jTextArea_Messge.setText(new String(trans.getData(), "UTF-8"));
					} catch (UnsupportedEncodingException e1) {
						LOGGER.error(e1.getMessage(),e1);
					}
        			jButton1.setText(Lang.getInstance().translate("Decrypt"));
        			encrypted =!encrypted;
        		}
        		//encrypted.isSelected();
        		
        	}
        });
        
        
        
        
        
        jLabel1.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 0.2;
        add(jLabel1, gridBagConstraints);

    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Block;
    private javax.swing.JLabel jLabel_Data;
    private javax.swing.JLabel jLabel_Message;
    private javax.swing.JLabel jLabel_Reciever;
    private javax.swing.JLabel jLabel_Sender;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea_Messge;
    private javax.swing.JTextField jTextField_Block;
    private javax.swing.JTextField jTextField_Data;
    private javax.swing.JTextField jTextField_Reciever;
    private javax.swing.JTextField jTextField_Sender;
    private javax.swing.JTextField jTextField_Title;
    // End of variables declaration                   
}
